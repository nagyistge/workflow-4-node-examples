//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICalculator")]
    public interface ICalculator {
        
        // CODEGEN: Generating message contract since the operation Add is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Add", ReplyAction="http://tempuri.org/ICalculator/AddResponse")]
        Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.AddResponse Add(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.AddRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Add", ReplyAction="http://tempuri.org/ICalculator/AddResponse")]
        System.Threading.Tasks.Task<Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.AddResponse> AddAsync(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.AddRequest request);
        
        // CODEGEN: Generating message contract since the operation Subtract is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Subtract", ReplyAction="http://tempuri.org/ICalculator/SubtractResponse")]
        Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.SubtractResponse Subtract(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.SubtractRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Subtract", ReplyAction="http://tempuri.org/ICalculator/SubtractResponse")]
        System.Threading.Tasks.Task<Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.SubtractResponse> SubtractAsync(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.SubtractRequest request);
        
        // CODEGEN: Generating message contract since the operation Multiply is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiply", ReplyAction="http://tempuri.org/ICalculator/MultiplyResponse")]
        Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.MultiplyResponse Multiply(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.MultiplyRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiply", ReplyAction="http://tempuri.org/ICalculator/MultiplyResponse")]
        System.Threading.Tasks.Task<Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.MultiplyResponse> MultiplyAsync(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.MultiplyRequest request);
        
        // CODEGEN: Generating message contract since the operation Divide is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Divide", ReplyAction="http://tempuri.org/ICalculator/DivideResponse")]
        Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.DivideResponse Divide(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.DivideRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Divide", ReplyAction="http://tempuri.org/ICalculator/DivideResponse")]
        System.Threading.Tasks.Task<Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.DivideResponse> DivideAsync(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.DivideRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Equals", ReplyAction="http://tempuri.org/ICalculator/EqualsResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Value")]
        double Equals(string CalculatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Equals", ReplyAction="http://tempuri.org/ICalculator/EqualsResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="Value")]
        System.Threading.Tasks.Task<double> EqualsAsync(string CalculatorId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/Reset")]
        void Reset(string CalculatorId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/Reset")]
        System.Threading.Tasks.Task ResetAsync(string CalculatorId);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Add", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class AddRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public double Value;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string CalculatorId;
        
        public AddRequest() {
        }
        
        public AddRequest(double Value, string CalculatorId) {
            this.Value = Value;
            this.CalculatorId = CalculatorId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddResponse {
        
        public AddResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Subtract", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SubtractRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public double Value;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string CalculatorId;
        
        public SubtractRequest() {
        }
        
        public SubtractRequest(double Value, string CalculatorId) {
            this.Value = Value;
            this.CalculatorId = CalculatorId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SubtractResponse {
        
        public SubtractResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Multiply", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class MultiplyRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public double Value;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string CalculatorId;
        
        public MultiplyRequest() {
        }
        
        public MultiplyRequest(double Value, string CalculatorId) {
            this.Value = Value;
            this.CalculatorId = CalculatorId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class MultiplyResponse {
        
        public MultiplyResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Divide", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DivideRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public double Value;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string CalculatorId;
        
        public DivideRequest() {
        }
        
        public DivideRequest(double Value, string CalculatorId) {
            this.Value = Value;
            this.CalculatorId = CalculatorId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DivideResponse {
        
        public DivideResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator>, Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.AddResponse Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator.Add(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.AddRequest request) {
            return base.Channel.Add(request);
        }
        
        public void Add(double Value, string CalculatorId) {
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.AddRequest inValue = new Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.AddRequest();
            inValue.Value = Value;
            inValue.CalculatorId = CalculatorId;
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.AddResponse retVal = ((Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator)(this)).Add(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.AddResponse> Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator.AddAsync(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.AddRequest request) {
            return base.Channel.AddAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.AddResponse> AddAsync(double Value, string CalculatorId) {
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.AddRequest inValue = new Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.AddRequest();
            inValue.Value = Value;
            inValue.CalculatorId = CalculatorId;
            return ((Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator)(this)).AddAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.SubtractResponse Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator.Subtract(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.SubtractRequest request) {
            return base.Channel.Subtract(request);
        }
        
        public void Subtract(double Value, string CalculatorId) {
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.SubtractRequest inValue = new Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.SubtractRequest();
            inValue.Value = Value;
            inValue.CalculatorId = CalculatorId;
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.SubtractResponse retVal = ((Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator)(this)).Subtract(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.SubtractResponse> Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator.SubtractAsync(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.SubtractRequest request) {
            return base.Channel.SubtractAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.SubtractResponse> SubtractAsync(double Value, string CalculatorId) {
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.SubtractRequest inValue = new Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.SubtractRequest();
            inValue.Value = Value;
            inValue.CalculatorId = CalculatorId;
            return ((Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator)(this)).SubtractAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.MultiplyResponse Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator.Multiply(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.MultiplyRequest request) {
            return base.Channel.Multiply(request);
        }
        
        public void Multiply(double Value, string CalculatorId) {
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.MultiplyRequest inValue = new Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.MultiplyRequest();
            inValue.Value = Value;
            inValue.CalculatorId = CalculatorId;
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.MultiplyResponse retVal = ((Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator)(this)).Multiply(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.MultiplyResponse> Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator.MultiplyAsync(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.MultiplyRequest request) {
            return base.Channel.MultiplyAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.MultiplyResponse> MultiplyAsync(double Value, string CalculatorId) {
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.MultiplyRequest inValue = new Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.MultiplyRequest();
            inValue.Value = Value;
            inValue.CalculatorId = CalculatorId;
            return ((Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator)(this)).MultiplyAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.DivideResponse Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator.Divide(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.DivideRequest request) {
            return base.Channel.Divide(request);
        }
        
        public void Divide(double Value, string CalculatorId) {
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.DivideRequest inValue = new Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.DivideRequest();
            inValue.Value = Value;
            inValue.CalculatorId = CalculatorId;
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.DivideResponse retVal = ((Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator)(this)).Divide(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.DivideResponse> Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator.DivideAsync(Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.DivideRequest request) {
            return base.Channel.DivideAsync(request);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.DivideResponse> DivideAsync(double Value, string CalculatorId) {
            Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.DivideRequest inValue = new Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.DivideRequest();
            inValue.Value = Value;
            inValue.CalculatorId = CalculatorId;
            return ((Microsoft.Samples.CorrelatedCalculator.CalculatorClient.ServiceReference1.ICalculator)(this)).DivideAsync(inValue);
        }
        
        public double Equals(string CalculatorId) {
            return base.Channel.Equals(CalculatorId);
        }
        
        public System.Threading.Tasks.Task<double> EqualsAsync(string CalculatorId) {
            return base.Channel.EqualsAsync(CalculatorId);
        }
        
        public void Reset(string CalculatorId) {
            base.Channel.Reset(CalculatorId);
        }
        
        public System.Threading.Tasks.Task ResetAsync(string CalculatorId) {
            return base.Channel.ResetAsync(CalculatorId);
        }
    }
}
